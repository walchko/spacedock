cmake_minimum_required(VERSION 3.28)
project({{ proect }} VERSION 0.0.1 LANGUAGES CXX)


set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)


if(PROJECT_IS_TOP_LEVEL)
    cmake_host_system_information(RESULT HOST QUERY HOSTNAME)
    cmake_host_system_information(RESULT OSN QUERY OS_NAME)
    cmake_host_system_information(RESULT OS_VERSION QUERY OS_RELEASE)
    cmake_host_system_information(RESULT PROC QUERY PROCESSOR_DESCRIPTION)

    message(STATUS "-------------------------------------")
    message(STATUS "  Project: ${PROJECT_NAME}")
    message(STATUS "  Version: ${CMAKE_PROJECT_VERSION}")
    message(STATUS "  C++ ${CMAKE_CXX_STANDARD}")
    message(STATUS "-------------------------------------")
    message(STATUS " ${HOST}")
    message(STATUS " ${OSN}: ${OS_VERSION}")
    message(STATUS " ${PROC}")
    message(STATUS "-------------------------------------")

    set(BUILD_EXAMPLES ON)
    set(BUILD_TESTS ON)
else()
    message(STATUS "-> ${PROJECT_NAME} is submodule")
    set(BUILD_EXAMPLES OFF)
    set(BUILD_TESTS OFF)
endif()


include(FetchContent)

# gtests ---------
# FetchContent_Declare(
#     gtest
#     URL https://github.com/google/googletest/archive/refs/tags/v1.15.2.zip
# )

# another library -----------------
# FetchContent_Declare(another_lib
#     GIT_REPOSITORY "https://github.com/who/another_lib.git"
#     GIT_TAG "origin/main"
# )

# FetchContent_MakeAvailable(
#     gtest
#     another_lib
# )

# Threads ---------------------------------------------------------
find_package(Threads REQUIRED)
if(Threads_FOUND)
    message(STATUS ">> Threads found")
    if(CMAKE_USE_PTHREADS_INIT)
        message(STATUS " -> Using pthreads")
    endif()
    # list(APPEND ALL_LIBS ${CMAKE_THREAD_LIBS_INIT})
else()
    message(WARNING "*** Could not find Threads ***")
endif()

LIST(APPEND APPS
    main
)

foreach(MAIN ${APPS})
    add_executable(${MAIN} src/${MAIN}.cpp)
    # target_include_directories(${MAIN} PUBLIC
    # )
    # target_link_libraries(${MAIN} PUBLIC
    #    Threads::Threads
    # )

    add_custom_command(TARGET ${MAIN} POST_BUILD
        # du is human readable, wc gives bytes
        # COMMAND du -sh ${CMAKE_CURRENT_BINARY_DIR}/${MAIN}
        COMMAND wc -c ${CMAKE_CURRENT_BINARY_DIR}/${MAIN}
    )
endforeach()